111111111111111111111111111111111111111111111111111111111111111111111111111

/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架
 */
public class MinaTimeServer{
	public static void main(String[] args){
		//code hehahadasdada			
	}
}

2222222222222222222222222222222222222222222222222222222222222222222222222222
/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 */
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	public static void main(String[] args){

		IoAcceptor acceptor = new NioSocketAcceptor;

	}
}

33333333333333333333333333333333333333333333333333333333333333333333333333
/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 *第三步，继续 new 一个 handler class ，然后绑定到一个端口;
 */
import java.net.InetSocketAddress;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	private static final int PORT = 38324;
	public static void main(String[] args){

		IoAcceptor acceptor = new NioSocketAcceptor;
		acceptor.bind(new InetSocketAddress(PORT));//绑定到一个端口
	}
}

4444444444444444444444444444444444444444444444444444444444444444444444444444444444
/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 *第三步，继续 new 一个 handler class ，然后绑定到一个端口;
 *第四步，为配置添加一个过滤器，用来记录所有信息。。第二个过滤器将二进制或协议特定的数据转化为 消息对象，（使用现有的TextLine工厂，自动处理文本）
 */
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
inport org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	private static final int PORT = 38324;
	public static void main(String[] args){
		
		IoAcceptor acceptor = new NioSocketAcceptor;
		acceptor.getFilterChain().addLast("logger",new LoggingFilter());//过滤器，用来记录所有信息。
		accepter.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodeFactory(Charset.forName("UTF-8"))));
		 // 自动处理基础文本信息(不必编写编解码器);
		acceptor.bind(new InetSocketAddress(PORT));//绑定到一个端口
	}
}


5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555

/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 *第三步，继续 new 一个 handler class ，然后绑定到一个端口;
 *第四步，为配置添加一个过滤器，用来记录所有信息。。第二个过滤器将二进制或协议特定的数据转化为 消息对象，（使用现有的TextLine工厂，自动处理文本）
 *第五步，定义一个处理程序，用于接受客户端链接请求的当前时间。
 */

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
inport org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	private static final int PORT = 38324;
	public static void main(String[] args){
		
		IoAcceptor acceptor = new NioSocketAcceptor;
		acceptor.getFilterChain().addLast("logger",new LoggingFilter());//过滤器，用来记录所有信息。
		accepter.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodeFactory(Charset.forName("UTF-8"))));
		 // 自动处理基础文本信息(不必编写编解码器);
		acceptor.setHandler(new TimeServerHandler());   //用于服务客户端连接请求的当前时间
		acceptor.bind(new InetSocketAddress(PORT));//绑定到一个端口
	}
}


666666666666666666666666666666666666666666666666666666666666666666666666666666666666666


/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 *第三步，继续 new 一个 handler class ，然后绑定到一个端口;
 *第四步，为配置添加一个过滤器，用来记录所有信息。。第二个过滤器将二进制或协议特定的数据转化为 消息对象，（使用现有的TextLine工厂，自动处理文本）
 *第五步，定义一个处理程序，用于接受客户端链接请求的当前时间。
 *第六步，添加NioSocketAcceptor配置，用来接受来自客户机的连接。
 */

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
inport org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	private static final int PORT = 38324;
	public static void main(String[] args) throws IOException{
		
		IoAcceptor acceptor = new NioSocketAcceptor;
		acceptor.getFilterChain().addLast("logger",new LoggingFilter());//过滤器，用来记录所有信息。
		accepter.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodeFactory(Charset.forName("UTF-8"))));
		 // 自动处理基础文本信息(不必编写编解码器);
		acceptor.setHandler(new TimeServerHandler());   //用于异常处理，下有类的介绍
		acceptor.getSessionConfig().setReadBufferSize(2048);//定义缓冲区的大小。
		acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,10);//设置闲置时间，10秒钟不回话为 闲置
		acceptor.bind(new InetSocketAddress(PORT));//绑定到一个端口
	}
}



77777777777777777777777777777777777777777777777777777777777777777  Handler////Handler////Handler

/*
 *异常处理类
 */
import java.util.Date;

import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;

public class TimeServerHandler extends IoHandlerAdapter{
	
	//直接跟踪、打印错误的堆栈，并关闭对话;
	public void exceptionCaught(IoSession session,Throwable cause) throws Exception
	{
		cause.printStackTrace();
	}
	
	//接收数据、返回客户端的当前时间;
	public void messageReceived(IoSession session,Object message) throws Exception
	{       
		String str = message.toString();
		if(str.trim().equalsIgnoreCase("quit")){
			session.close();             //Eclipse 报告说 方法 close() 被弃用 - -
			return;                  //一旦接收到 quit ,那么将退出对话;
		}
		Date date = new Date();
		session.write(date.toString());  //打印当前时间到客户端;
		System.out.println("Message written...");		
	}

	//当回话闲置超过指定时间时，这个方法将会被调用;
	public void sessionIdle(IoSession session,IdleStatus status) throws Exception
	{
		System.out.println("IDLE " + session.getIdleCount(status));
	}
}


8888888888888888888888888888888888888888888888888888888888888888888888888888888888888


/*
 *师从 Apache MINA User Guide
 *第一步，放一个框架;
 *第二步，new 一个对象，用于监听客户端的链接;
 *第三步，继续 new 一个 handler class ，然后绑定到一个端口;
 *第四步，为配置添加一个过滤器，用来记录所有信息。。第二个过滤器将二进制或协议特定的数据转化为 消息对象，（使用现有的TextLine工厂，自动处理文本）
 *第五步，定义一个处理程序，用于接受客户端链接请求的当前时间。
 *第六步，添加NioSocketAcceptor配置，用来接受来自客户机的连接。
 */

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaTimeServer{
	private static final int PORT = 38324;
	public static void main(String[] args) throws IOException{
		
		IoAcceptor acceptor = new NioSocketAcceptor();
		acceptor.getFilterChain().addLast("logger",new LoggingFilter());//过滤器，用来记录所有信息。
		acceptor.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName("UTF-8"))));
		 // 自动处理基础文本信息(不必编写编解码器);
		acceptor.setHandler(new TimeServerHandler());   //用于异常处理，下有类的介绍
		acceptor.getSessionConfig().setReadBufferSize(2048);//定义缓冲区的大小。
		acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,10);//设置闲置时间，10秒钟不回话为 闲置
		acceptor.bind(new InetSocketAddress(PORT));//绑定到一个端口
	}
}






/*
	编译已经没问题了，，BUT 94.跑不起来，，，，报错：

////////////////////////////////////////////////////////////////////////////////////////
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".	              //
SLF4J: Defaulting to no-operation (NOP) logger implementation			      //
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.    //
////////////////////////////////////////////////////////////////////////////////////////

	进给的网站，找解决办法：       

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
Failed to load class org.slf4j.impl.StaticLoggerBinder

This warning message is reported when the org.slf4j.impl.StaticLoggerBinder class could not be loaded into memory. This happens when no appropriate SLF4J binding could be found on the class path. Placing one (and only one) of slf4j-nop.jar, slf4j-simple.jar, slf4j-log4j12.jar, slf4j-jdk14.jar or logback-classic.jar on the class path should solve the problem.

since 1.6.0 As of SLF4J version 1.6, in the absence of a binding, SLF4J will default to a no-operation (NOP) logger implementation.

If you are packaging an application and you do not care about logging, then placing slf4j-nop.jar on the class path of your application will get rid of this warning message. Note that embedded components such as libraries or frameworks should not declare a dependency on any SLF4J binding but only depend on slf4j-api. When a library declares a compile-time dependency on a SLF4J binding, it imposes that binding on the end-user, thus negating SLF4J's purpose. 

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

	但是这四个jar 在apache 的文件里都没有找到 = =    （slf4j-nop.jar, slf4j-simple.jar, slf4j-log4j12.jar, slf4j-jdk14.jar） 

	项目（右键） -> build path -> configure build path -> Add variable 死活没有 。。。。。

	于是乎 去 http://www.slf4j.org/codes.html#StaticLoggerBinder 
        下载一个对应版本的 全包 （ download -> Previous versions -> http://www.slf4j.org/dist/ )
	
	解压缩， 所有 jar 全都有了。哈哈 。 。   CP 到 apache目录下 再 build path  44行不行。。。

	哈哈，可以了 ！  跑起来了。。也不会报错。。在源代码最后加一行  System.out.println("哈哈可以了。");  可以正确输出了！ 


	  //  所有代码均没被Eclipse标记，只有一行 说 close（） 方法被弃用。。给划了。。不造有啥影响。。。

	  //  ServerTest 全是解决了 接下来写 ClientTest              

#2016#08#10# 10：43  a.m









































