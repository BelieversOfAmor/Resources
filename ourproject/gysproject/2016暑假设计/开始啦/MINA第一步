
    #2016#08#07#  高义升

  配置MINA 并测试
 （在配置好 JDK 、Eclipse java EE 前提下）

************************** STEP 1  **************************
STEP 1：

  配置 MINA  ( eclipse )
  1.download 	 *.jar
    
     URL: http://mina.apache.org/mina-project/downloads.html


           Apache MINA 2.0.13 stable (Java 5+)
		Binaries

         	.tar.gz archive mina-2.0.13 (signatures : MD5 SHA1 ASC)
   	 	.tar.bz2 archive mina-2.0.13 (signatures : MD5 SHA1 ASC)
   	 	.zip archive mina-2.0.13 (signatures : MD5 SHA1 ASC)

  2.将  *.jar  buildpath
	
	以外部包的方式导入上面准备的4个资源
	（右键项目：build path  / configuare build path / add external jars  ）
	 导入后如下结构图，表明我们的环境搭建好了。

           - Referenced Libraries

               -mina-core-2.0.7.jar 

              - slf4j-api.jar 

              - log4j.jar 

              - slf4j-simple.jar 

	

	    ** 这里是教程中4个导入的资源，，我没找到同名的，于是将全部的 jar 导入 .(实践证明，可行）(再不行上插件）.

************************** STEP 2  **************************
STEP 2：
  测试 MINA     （ 源代码附在最后 ）
  1.   Server 端

          .   创建Server	 public class MinaServer{}
	  .   创建消息处理类      public class MinaServerHanlder extends IoHandlerAdapter{}
 

       Client 端

          .   创建客户端	 public class MinaClient{}
	  .   创建客户端消息处理  public class MinaClientHanlder extends IoHandlerAdapter{}




  2.    运行结果
	
	server ：
	新客户连接
	第 1 个 client 登陆！address： : /127.0.0.1:55497
	服务器收到客户端发送指令 ：hello world by morpheus hahaha


	client :
	客户端登陆成功

		

 
************************************** 附 *******************************************************
************************************** 附 *******************************************************

参考资料：   Apache       URL : http://mina.apache.org/
	    Mina 环境搭建 URL： http://blog.csdn.net/pdw_jsp/article/details/8603224

附源代码：  
	
******************** 1.Server 端  ******************


import java.io.IOException;
import java.net.InetSocketAddress;

import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.serialization.ObjectSerializationCodecFactory;
import org.apache.mina.transport.socket.SocketAcceptor;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

public class MinaServer   
    {  
        public static void main(String[] args)  
        {  
            //创建ServerScoket  
            SocketAcceptor acceptor = new NioSocketAcceptor();  
            //设置传输方式（这里设置成对象传输模式，还有很多的类型后面会具体讲到  
            DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();  
            ProtocolCodecFilter filter = new ProtocolCodecFilter(  
                    new ObjectSerializationCodecFactory());  
            chain.addLast("objectFilter", filter);  
            // 添加消息处理  
      
            acceptor.setHandler(new MinaServerHanlder());  
            // 开启服务器   
            int bindPort = 9988;  
            try {  
                          acceptor.bind(new InetSocketAddress(bindPort));  
            } catch (IOException e) {  
                                e.printStackTrace();  
                      }  
        }  
      
    }  



******************** 2.Server 端 消息处理类  ******************

import org.apache.mina.core.service.IoHandlerAdapter;  
import org.apache.mina.core.session.IdleStatus;  
import org.apache.mina.core.session.IoSession;

public class MinaServerHanlder extends IoHandlerAdapter {  
 private int count = 0; // 由底层决定是否创建一个session  
 public void sessionCreated(IoSession session) {  
  System.out.println("新客户连接");  
 } // 创建了session 后会回调sessionOpened  
 public void sessionOpened(IoSession session) throws Exception {  
  count++;  
  System.out.println("第 " + count + " 个 client 登陆！address： : "  
    + session.getRemoteAddress());  
 } // 当收到了客户端发送的消息后会回调这个函数  
 public void messageReceived(IoSession session, Object message)  
   throws Exception {  
        System.out.println("服务器收到客户端发送指令 ：" + message); } // 发送成功后会回调的方法  
 public void messageSent(IoSession session, Object message) {  
  System.out.println("message send to client");  
 } // session 关闭调用  
 public void sessionClosed(IoSession session) {  
  System.out.println("one client disconnect");  
 }// session 空闲的时候调用  
 public void sessionIdle(IoSession session, IdleStatus status) {  
  System.out.println("connect idle");  
 } // 异常捕捉  
 public void exceptionCaught(IoSession session, Throwable cause) {  
  System.out.println("throws exception");  
 }  }



******************** 3.Client 端  ******************

import java.net.InetSocketAddress;     
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;  
import org.apache.mina.core.future.ConnectFuture;  
import org.apache.mina.filter.codec.ProtocolCodecFilter;  
import org.apache.mina.filter.codec.serialization.ObjectSerializationCodecFactory;  
import org.apache.mina.transport.socket.nio.NioSocketConnector;  
      
public class MinaClient {  
      
        public static void main(String[] args) {  
            // TODO Auto-generated method stub  
                // 创建Socket  
                 NioSocketConnector connector = new NioSocketConnector();  
                 //设置传输方式  
                 DefaultIoFilterChainBuilder chain = connector.getFilterChain();  
                 ProtocolCodecFilter filter = new ProtocolCodecFilter(new ObjectSerializationCodecFactory());  
                 chain.addLast("objectFilter", filter);  
                 //设置消息处理  
                 connector.setHandler(new MinaClientHanlder());  
                 //超时设置  
                 connector.setConnectTimeoutCheckInterval(30);  
                 //连接  
                 ConnectFuture cf = connector.connect(new InetSocketAddress("localhost", 9988));  
                 cf.awaitUninterruptibly();  
                 cf.getSession().getCloseFuture().awaitUninterruptibly();  
                 connector.dispose();  
                   
        }  
      
}  


******************** 4.Client 端 消息处理类  ******************

import org.apache.mina.core.service.IoHandlerAdapter;  
import org.apache.mina.core.session.IoSession;
    public class MinaClientHanlder extends IoHandlerAdapter {  
     public void sessionOpened(IoSession session) throws Exception {  
         System.out.println("客户端登陆成功");  
         session.write("hello world by Morpheus hahaha");  
     }  
          
     public void sessionClosed(IoSession session)  
     {  
       System.out.println("client close");  
     }  
       
     public void messageReceived(IoSession session , Object message)throws Exception  
     {  
      System.out.println("客户端接受到了消息") ;  
        
     } 
}


